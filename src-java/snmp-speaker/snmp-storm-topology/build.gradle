plugins {
    id 'io.freefair.aspectj.post-compile-weaving'
    id 'com.github.johnrengelman.shadow'
}

//compileJava.ajc.options.compilerArgs += '-showWeaveInfo'
//compileJava.ajc.options.compilerArgs += '-verbose'

description = 'SNMP Storm Topology'
dependencies {
    implementation project(':base-storm-topology')
    runtimeClasspath project(path: ':base-storm-topology', configuration: 'releaseArtifacts')
    testImplementation project(path: ':base-storm-topology', configuration: 'testArtifacts')

    runtimeOnly project(':kilda-persistence-neo4j')
    testImplementation project(':kilda-persistence-neo4j')


    implementation('org.apache.httpcomponents:httpclient:4.5.12')
    testImplementation('org.apache.httpcomponents:httpclient:4.5.12')

    compileOnly('org.apache.storm:storm-core')
    testImplementation('org.apache.storm:storm-core') {
        exclude(group: 'org.slf4j', module: 'log4j-over-slf4j')
    }

    implementation 'org.hibernate.validator:hibernate-validator'

    testImplementation 'junit:junit'
    testImplementation 'pl.pragmatists:JUnitParams'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.clojure:clojure'
    testImplementation 'org.hamcrest:hamcrest-library'
    testImplementation 'org.neo4j:neo4j'

    testRuntimeOnly 'org.apache.logging.log4j:log4j-slf4j-impl'
    testImplementation('org.mock-server:mockserver-netty') {
        exclude(group: 'ch.qos.logback')
    }
    testImplementation 'io.netty:netty-all:4.1.42.Final'


    compileOnly 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    //implementation 'org.aspectj:aspectjrt:1.8.13'
    implementation 'org.mapstruct:mapstruct-jdk8'
    implementation 'org.mapstruct:mapstruct-processor'
    annotationProcessor 'org.mapstruct:mapstruct-processor'
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor'
}

jar {
    manifest {
        attributes 'Main-Class': 'org.openkilda.wfm.topology.snmp.SnmpTopology'
    }
    archiveClassifier = 'original'
}

shadowJar {
    archiveClassifier = ''
    mergeServiceFiles()
}

artifacts {
    archives shadowJar
}
